const { createResolver } = require('@forge/resolver');
const { asApp, asUser } = require('@forge/api');
const fetch = require('node-fetch');
const express = require('express'); // Necessário para adicionar o middleware
const app = express(); // Cria uma instância do Express

const resolver = createResolver();

// Middleware para configurar CSP
app.use((req, res, next) => {
    res.setHeader(
        "Content-Security-Policy",
        "default-src 'self'; script-src 'self' https://forge.cdn.prod.atlassian-dev.net; style-src 'self';"
    );
    next();
});

// Função para buscar projetos do Jira
resolver.define('getProjects', async (req) => {
    console.log('getProjects function was called');  // Log inicial para confirmar que a função foi chamada
    try {
        console.log('Attempting to fetch Jira projects...');
        
        const response = await asUser().requestJira('/rest/api/3/project');
        
        console.log('Raw response from Jira:', response);

        if (!response.ok) {
            throw new Error(`Failed to fetch projects: ${response.status} ${response.statusText}`);
        }

        const projects = await response.json();
        console.log('Parsed projects:', projects);

        if (!Array.isArray(projects)) {
            throw new Error('Unexpected data format for projects');
        }

        return {
            statusCode: 200,
            body: JSON.stringify(projects),
        };
    } catch (error) {
        console.error('Error fetching projects:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: `Error fetching projects: ${error.message}` }),
        };
    }
});

// Função para buscar tipos de solicitação (Request Types) do Jira
resolver.define('getRequestTypes', async (req) => {
    const { projectId } = req.body;
    console.log(`getRequestTypes function was called for project ID: ${projectId}`);  // Log inicial para confirmar que a função foi chamada
    try {
        console.log(`Fetching request types for project ID: ${projectId}...`);
        
        const response = await asUser().requestJira(`/rest/servicedeskapi/servicedesk/${projectId}/requesttype`);
        
        console.log('Raw response from Jira:', response);

        if (!response.ok) {
            throw new Error(`Failed to fetch request types: ${response.status} ${response.statusText}`);
        }

        const requestTypes = await response.json();
        console.log('Parsed request types:', requestTypes);

        if (!Array.isArray(requestTypes.values)) {
            throw new Error('Unexpected data format for request types');
        }

        return {
            statusCode: 200,
            body: JSON.stringify(requestTypes.values),
        };
    } catch (error) {
        console.error('Error fetching request types:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: `Error fetching request types: ${error.message}` }),
        };
    }
});

// Função para criar issues
resolver.define('createIssue', async (req) => {
    console.log('createIssue function was called');  // Log inicial para confirmar que a função foi chamada
    try {
        const jiraResponse = await asApp().requestJira('/rest/api/3/issue', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                fields: {
                    project: {
                        key: 'FIT'
                    },
                    summary: 'New issue created by Telegram',
                    description: 'Description generated by Telegram bot',
                    issuetype: {
                        name: 'Task'
                    }
                }
            })
        });

        const issueData = await jiraResponse.json();
        console.log(`Issue successfully created: ${issueData.key}`);

        const telegramToken = process.env.TELEGRAM_BOT_TOKEN; 
        const telegramApiUrl = `https://api.telegram.org/bot${telegramToken}/sendMessage`;

        const chatId = '-1002240685211'; 
        const message = `Issue created in Jira: ${issueData.key}`;

        const telegramResponse = await fetch(telegramApiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: chatId,
                text: message,
            }),
        });

        const telegramData = await telegramResponse.json();

        console.log(`Message sent to Telegram: ${telegramData.result.text}`);

        return {
            statusCode: 200,
            body: JSON.stringify({ message: `Issue ${issueData.key} created and notified in Telegram.` }),
        };
    } catch (error) {
        console.error('Error processing function:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: `Error creating issue or sending notification: ${error.message}` }),
        };
    }
});

exports.handler = resolver.getDefinitions();

// Inicia o servidor (caso ainda não esteja rodando)
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
